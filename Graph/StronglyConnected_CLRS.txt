int color[n];
int pred[n];
int f[n];    \\finishing time
int d[n];    \\discovery time

int time;

vector <vector<int> > strcon;
vector <int> P;

memset(color, 0, sizeof(color));
memset(pred, 0, sizeof(pred));
memset(f, 0, sizeof(f));
memset(d, 0, sizeof(d));

time = 0;

void dfs_visit(int u)
{
  color[u]=1;
  time++;
  d[u]=time;
  for (int j=0; j<Adj[u]; j++)  \\explore edge (u,v)
  { 
    int v = Adj[u][j];
    if (color[v] == 0)
    {
      pred[v]=u;
      dfs_visit(v);  
    } 
  }
  color[u]=2;
  time++;
  f[u]=time;
}

void dfs()
{
  for (int i=0; i<n; i++)
  {
    if (color[i] == 0)
      dfs_visit(i);
  }
}

void dfsT_visit(int u) \\AdjT has reverse edges of Adj
{
  color[u]=1;
  P.push_back(u);
  time++;
  d[u]=time;
  for (int j=0; j<AdjT[u]; j++)  \\explore edge (u,v) 
  { 
    int v = AdjT[u][j];
    if (color[v] == 0)
    {
      pred[v]=u;
      dfs_visit(v);  
    } 
  }
  color[u]=2;
  time++;
  f[u]=time;
}


vector <vector<int> > dfsT()
{
  vector <pair<int, int> > ord;
  for (int i=0; i<n; i++)
  {
    pair <int, int> L;
    L.first = f[i];
    L.second = i;
    ord.push_back(L);
  }
  sort(ord.begin(), ord.end());
  reverse(ord.begin(), ord.end()); 

  for (int i=0; i<n; i++)
  {
    if (color[ord[i].second] == 0)
    {
      P.clear(); 
      dfsT_visit(ord[i].second);
      strcon.push_back(P);
    }
  }
}


vector <vector <int> > strongly_conn()
{
  dfs();
  return dfsT();
}