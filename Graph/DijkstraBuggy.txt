struct node 
{
 int cost;
 int at;
};

bool operator<(const node &leftNode, const node &rightNode) 
{
 if (leftNode.cost != rightNode.cost) return leftNode.cost < rightNode.cost;
 if (leftNode.at != rightNode.at) return leftNode.at < rightNode.at;
 return false;
}


int KiloManX::leastShots(vector <string> dc, vector <int> bh) {
	
 priority_queue <node> pq;
 vector <bool> visited(16, false);

 node A;
 A.at = 0;
 A.cost = 0;
 
 pq.push(A);

 while (pq.empty() == false) {
  node top = pq.top();
  pq.pop();

  // Make sure we don't visit the same configuration twice
  if (visited[top.at]) continue;
  visited[top.at] = true;

  //Final condition
  if (top.at == (1 << bh.size()) - 1)
   return top.cost;

  for (int i = 0; i < dc.size(); i++) {
   // Check if we've already visited this boss, then don't bother trying him again
   if ((top.at >> i) & 1) continue;

   // Now figure out what the best amount of time that we can destroy this boss is, given the weapons we have.
   // We initialize this value to the boss's health, as that is our default (with our KiloBuster).
   int best = bh[i];
   for (int j = 0; j < dc.size(); j++) {
    if (i == j) continue;
    if (((top.at >> j) & 1) && dc[j][i] != '0') {
     // We have this weapon, so try using it to defeat this boss
     int shotsNeeded = bh[i] / (dc[j][i] - '0');
     if (bh[i] % (dc[j][i] - '0') != 0) shotsNeeded++;
     best = min(best, shotsNeeded);
    }
   }

   // Add the new node to be searched, showing that we defeated boss i, and we used 'best' shots to defeat him.
   A.at   = top.at | (1 << i);
   A.cost = top.cost + best;
   pq.push(A);
  }
 }
}