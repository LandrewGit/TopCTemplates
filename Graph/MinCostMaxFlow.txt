#include<iostream> 
#include<sstream> 
#include<cstdlib> 
#include<cmath> 
#include<vector> 
#include<string> 
#include<algorithm> 
using namespace std; 
typedef vector<int>VI;typedef vector<VI>VVI; 
typedef vector<string>VS; 
typedef pair<int,int>PII; 
#define FOR(i,n) for((i)=0;(i)<(n);(i)++) 
#define FORN(i,n) for((i)=(n)-1;(i)>=0;(i)--) 
#define BE(a) ((a).begin()),((a).end()) 
#define SI(a) ((a).size()) 
#define PB push_back 
#define MP make_pair 
#define FORIT(i,a) for((i)=(a).begin();(i)!=(a).end();(i)++) 
#define CLR(a,v) memset((a),(v),sizeof(a)) 

#define MAXN 110 
int cap[MAXN][MAXN], flow[MAXN][MAXN], cost[MAXN][MAXN]; 
int n, sink, source, total_cost; 

inline int cf(int i, int j) { 
    if (flow[j][i]) return flow[j][i]; 
    else return cap[i][j] - flow[i][j]; 
} 

inline int costf(int i, int j) { 
    if (flow[j][i]) return -cost[j][i]; 
    else return cost[i][j]; 
} 

inline void pushf(int i, int j, int x) { 
    total_cost += costf(i, j) * x; 
    if (flow[j][i]) flow[j][i] -= x; 
    else flow[i][j] += x; 
} 

int augment(void) { 
    int dist[MAXN], prev[MAXN]; 
    bool reach[MAXN]; 
    bool changed; 
    int i, j; 
    CLR(reach,0); 
    reach[source] = changed = true; 
    dist[source] = 0; 
    while (changed) { 
        changed = false; 
        FOR (i,n) if (reach[i]) FOR (j,n) if (cf(i, j)) 
            if (!reach[j] || dist[i] + costf(i, j) < dist[j]) { 
                reach[j] = changed = true; 
                dist[j] = dist[i] + costf(i, j); 
                prev[j] = i; 
            } 
    } 
    if (!reach[sink]) return 0; 
    for (i = sink; i != source; i = prev[i]) pushf(prev[i], i, 1); 
    return 1; 
} 

int mcmf(void) { 
    int ret, x; 
    CLR(flow,0); 
    ret = total_cost = 0; 
    while (x = augment()) ret += x; 
    return ret; 
} 



//SRM 371

struct ChessMatchup { 
    int maximumScore(VI a, VI b) { 
        int i, j; 
        n = SI(a) + SI(b) + 2; 
        source = n - 2; 
        sink = n - 1; 
        CLR(cap,0); 
        CLR(cost,0); 
        FOR (i,SI(a)) cap[source][i] = 1; 
        FOR (i,SI(b)) cap[SI(a) + i][sink] = 1; 
        FOR (i,SI(a)) FOR (j,SI(b)) { 
            cap[i][SI(a) + j] = 1; 
            cost[i][SI(a) + j] = -((a[i] >= b[j]) + (a[i] > b[j])); 
        } 
        cout << mcmf() << endl; 
        return -total_cost; 
    } 


};  
