int cable(vector <string> len){

int n = len.size();

int m[n+1][n+1];

int su = 0;
REPSZ(i, len)
{
  REPSZ(j, len)
  {
    if (len[i][j] <= 'z' && len[i][j] >= 'a')
    {
      su = su + (len[i][j] - 'a' + 1);
      m[i][j] = len[i][j] - 'a' + 1;
    }
    else if (len[i][j] <= 'Z' && len[i][j] >= 'A')
    {
      su = su + (len[i][j] - 'A' + 27);
      m[i][j] = len[i][j] - 'A' + 27;
    }
    else
     m[i][j] = 0;
  }
}

if (n==1)
 return m[0][0];

int x = 0;
int y = 0;
int bes = 100;
REPSZ(i, len)
{
  REPSZ(j, len)
  {
    if (i != j && m[i][j] < bes && m[i][j] > 0)
    {
      bes = m[i][j];
      x = i;
      y = j;
    } 
  }
}

if (bes == 100)
 return -1;

vector <bool> add(n, false);
add[x] = true;
add[y] = true;
int mst = m[x][y];

int numAdd = 2;
bool added = true;
vector <int> cur;
cur.push_back(x);
cur.push_back(y);
while (added)
{
  added = false;
  bes = 100;
  x = 0;
  y = 0;
  REPSZ(i, cur)
  {
     for (int j=0; j<n; j++)
     {
        if (!add[j] && m[i][j] > 0)
        {
           if (m[i][j] < bes)
           {
             bes = m[i][j];
             x = i;
             y = j;
           }
        }
        if (!add[j] && m[j][i] > 0)
        {
           if (m[j][i] < bes)
           {
             bes = m[j][i];
             x = i;
             y = j;
           }
        }     
     }
  }
  if (bes < 100)
  {
    added = true;
    mst = mst + bes;
    add[y] = true;
    numAdd++;
    cur.push_back(y);
    cout << y << endl;
  }
}

if (numAdd < n)
 return -1;
 
return (su-mst);

}
};